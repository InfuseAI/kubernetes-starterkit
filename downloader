#! /bin/bash
set -eo pipefail
IFS=$'\n\t '
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
source ${DIR}/lib/util.source

INSTALL_PATH=''

usage() {
local SELF=`basename $0`
    cat <<EOF
USAGE:
  $SELF all [options]
  Options:
    --install <path>          : Install the binary to tartget path
    --debug                   : Enable debug mode
EOF
}

prepare_downloader() {
  check_yq

  # Load tools list
  pushd ${DIR}/tools > /dev/null
  TOOLS_LIST=$(ls *.yaml | sed -e 's/\.yaml//g')
  popd > /dev/null
}

get_tools() {
  pushd ${DIR}/tools > /dev/null
  ls *.yaml | sed -e 's/\.yaml//g'
  popd > /dev/null
}

list_tools() {
  pushd ${DIR}/tools > /dev/null
  TOOLS_LIST=$(get_tools)
  info "Starterkit tools"
  for app in $TOOLS_LIST; do
    local version=$(yq r $app.yaml version)
    echo "  $app@$version"
  done
  popd > /dev/null
}

install_all() {
  local TOOLS_LIST=$(get_tools)
  for app in $TOOLS_LIST; do
    install_tool $app
  done
}

download_all() {
  local TOOLS_LIST=$(get_tools)
  for app in $TOOLS_LIST; do
    download_tool $app
    if [ "$INSTALL_PATH" != '' ]; then
      install_tool $app
    fi
  done
}

install_tool() {
  pushd ${DIR}/tools > /dev/null
  local app=$1
  local name=$(yq r $app.yaml name)
  local cache_path=${DIR}/.cache/$app

  info "[Install] $name -> $INSTALL_PATH/$name"
  install $cache_path/$name $INSTALL_PATH

  popd > /dev/null
}

download_tool() {
  pushd ${DIR}/tools > /dev/null
  local app=$1

  if [ ! -f $app.yaml ]; then
    error "[Error] No such tool $app"
    return 1
  fi

  local name=$(yq r $app.yaml name)
  local version=$(yq r $app.yaml version)
  local platform=$(uname | tr '[:upper:]' '[:lower:]')
  local archive_url=$(yq r $app.yaml archive.$platform.url)

  info "[Fetch] $name@$version from $archive_url"
  mkdir -p ${DIR}/.cache/$app
  local cache_path=${DIR}/.cache/$app
  local type=$(yq r $app.yaml archive.$platform.type)
  case "$type" in
    tgz)
      # curl -L -o $cache_path/$name.$type $archive_url
      ${DIR}/bin/cached_curl $cache_path/$name.$type $archive_url
      tar zxf $cache_path/$name.$type -C $cache_path
    ;;
    *)
      # curl -L -o $cache_path/$name $archive_url
      ${DIR}/bin/cached_curl $cache_path/$name $archive_url
    ;;
  esac

  local bin_path=$(yq r $app.yaml archive.$platform.path)
  if [[ "$bin_path" != "null" ]]; then
    mv $cache_path/$bin_path $cache_path/$name
  fi

  chmod +x $cache_path/$name
  info "[$name] Download completed"
  if [ "$SILENT" == false ]; then tree $cache_path; fi
  popd > /dev/null
}

downloader_menu::download_tools_checklist() {
  local TOOLS_LIST=$(get_tools)
  local whiptail_checklist_cmd='whiptail --title "Kubernetes Starter-Kit" --checklist "Please select the tools to download" 18 90 10'
  # Select download tools
  pushd ${DIR}/tools > /dev/null
  for app in $TOOLS_LIST; do
    local name=$(yq r $app.yaml name)
    local description=$(yq r $app.yaml description)
    local version=$(yq r $app.yaml version)
    whiptail_checklist_cmd="$whiptail_checklist_cmd $name \"$description (Version: $version)\" ON"
  done
  popd > /dev/null

  # Download the selected tools
  eval $whiptail_checklist_cmd 3>&2 2>&1 1>&3
}

downloader_menu::install_path_inputbox() {
  INSTALL_PATH=$(whiptail --inputbox --title "Kubernetes Starter-Kit" "Please provide the install path\nOr skip install with empty" 8 60 $INSTALL_PATH 3>&1 1>&2 2>&3)

  if [ "$INSTALL_PATH" == '' ]; then
    return 0
  fi

  if [ ! -d "$INSTALL_PATH" ]; then
    whiptail --title "Kubernetes Starter-Kit" --msgbox "  Invalid path: $INSTALL_PATH" 8 60
    exit 1
  fi
}

downloader_menu::download_progress() {
  {
  local COUNT=$(echo $CHOICES | awk '{print NF}')
  local i=0
  for app in $CHOICES; do
    local name="${app//\"}"
    # calculate progress
    PCT=$(( 100*(++i)/COUNT ))
    cat <<EOF
XXX
${PCT}
Downloading ${name}
XXX
EOF
    download_tool "${name}" || exit 1
  done
  } | whiptail --title "Kubernetes Starter-Kit" --gauge "Downloading..." 6 60 0
}

downloader_menu::install_progress() {
  if [ "$INSTALL_PATH" == '' ]; then
    return 0
  fi

  {
  local COUNT=$(echo $CHOICES | awk '{print NF}')
  local i=0
  for app in $CHOICES; do
    local name="${app//\"}"
    # calculate progress
    PCT=$(( 100*(++i)/COUNT ))
    cat <<EOF
XXX
${PCT}
Install ${name} -> ${INSTALL_PATH}/${name}
XXX
EOF
    install_tool "${name}" || exit 1
    sleep 0.5
  done
  } | whiptail --title "Kubernetes Starter-Kit" --gauge "Install ..." 6 60 0
}

downloader_menu::complete() {
  whiptail --title "Kubernetes Starter-Kit" --msgbox "Download completed" 7 42
}

downloader_menu() {
  export SILENT=true

  CHOICES=$(downloader_menu::download_tools_checklist)
  downloader_menu::install_path_inputbox
  downloader_menu::download_progress
  downloader_menu::install_progress
  downloader_menu::complete
}

main() {
  local target=''

  prepare_downloader

  while (( "$#" )); do
    case "${1:-}" in
      all|list|cleanup)
        target=$1
      ;;
      --install)
        shift
        INSTALL_PATH=${1}
        if [[ "$INSTALL_PATH" == '' ]]; then
          error "Should provide install path"
          usage
          exit 1
        elif [ ! -d $INSTALL_PATH ]; then
          error "Should provide correct install path"
          exit 1
        fi
      ;;
      --debug)
        set -x
      ;;
      -h|--help)
        usage
        exit
      ;;
      *)
        if ! contains "$TOOLS_LIST" $1; then
          error "[Error] Not support tools"
          exit 1
        fi
        target=$1
      ;;
    esac
    shift || (usage; exit 1)
  done

  case "$target" in
    list)
      list_tools
    ;;
    all)
      download_all
    ;;
    cleanup)
      rm -rf ${DIR}/.cache/*
    ;;
    *)
      if [ "$target" == "" ]; then
        downloader_menu
      else
        download_tool $target
        if [ "$INSTALL_PATH" != '' ]; then
          install_tool $target
        fi
      fi
    ;;
  esac
}

main "$@"
